name: Scorecard supply-chain security

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run scorecard on'
        required: false
        default: 'main'
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

permissions: read-all

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Run Scorecard analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
          # Uncomment below if you need a PAT for private repos
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}

      # Optional: patch SARIF to include a file reference for GitHub Code Scanning
      - name: Patch SARIF for Code Scanning
        run: |
          python3 - << 'EOF'
          import json
          sarif_path = "results.sarif"
          with open(sarif_path) as f:
              sarif = json.load(f)

          for run in sarif.get("runs", []):
              results = run.get("results", [])
              if not results and run.get("tool", {}).get("driver", {}).get("rules"):
                  for rule in run["tool"]["driver"]["rules"]:
                      results.append({
                          "ruleId": rule["id"],
                          "level": rule.get("defaultConfiguration", {}).get("level", "error"),
                          "message": {"text": rule.get("fullDescription", {}).get("text", "Scorecard check triggered")},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": "README.md"},
                                  "region": {"startLine": 1}
                              }
                          }]
                      })
              run["results"] = results

          with open(sarif_path, "w") as f:
              json.dump(sarif, f, indent=2)
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
