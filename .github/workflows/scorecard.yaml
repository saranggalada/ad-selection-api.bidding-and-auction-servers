# Scorecard supply-chain security - fixed to normalize SARIF and only upload to code-scanning on default branch
name: Scorecard supply-chain security

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run scorecard on'
        required: false
        default: 'main'
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

# Declare default permissions as read only, but allow security-events upload when needed
permissions: read-all

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write

    steps:
      - name: Checkout code (requested branch)
        uses: actions/checkout@v4
        with:
          # checkout the branch specified by the workflow input (fallback to current ref)
          ref: ${{ github.event.inputs.branch || github.ref }}
          persist-credentials: false

      - name: Show checked out ref
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "Requested branch (input): ${{ github.event.inputs.branch }}"

      - name: Run analysis
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      # Always upload the raw SARIF as an artifact so you can download & inspect it for non-default branches
      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: scorecard-results-sarif
          path: results.sarif
          retention-days: 5

      # Normalize SARIF so that GitHub can map results and create alerts:
      # - Replace invalid/empty URIs like "no file associated with this alert" with "NO_FILE"
      # - Ensure message.text exists (fallback to message.markdown)
      - name: Normalize SARIF for Code Scanning
        id: normalize
        run: |
          echo "Sanitizing results.sarif for upload to code-scanning..."
          if [ ! -f results.sarif ]; then
            echo "No results.sarif found, skipping normalization"
            exit 0
          fi
          # Use jq to:
          #  - replace null / space-containing / 'no file' artifactLocation.uri with "NO_FILE"
          #  - ensure message.text exists (fallback to message.markdown stripped of simple HTML)
          jq '
            # helper: sanitize artifactLocation.uri values
            def sanitize_uri:
              if . == null then "NO_FILE"
              else
                # if looks like "no file associated..." or contains spaces, use NO_FILE
                (if (test("(?i)^no file") or test(" ") ) then "NO_FILE" else . end)
              end;

            (.runs[]?.results[]? | .locations[]?.physicalLocation?.artifactLocation?.uri) |= sanitize_uri
            |
            (.runs[]?.results[]?) |= (
              if (.message.text == null) and (.message.markdown != null) then
                .message.text = (.message.markdown | gsub("<[^>]+>";""))
              else .
              end
            )
          ' results.sarif > results.fixed.sarif

          # keep a copy of the sanitized file for debugging
          mv results.fixed.sarif results.sarif
          echo "Sanitization complete â€” results.sarif updated."

      # Upload to GitHub Code Scanning only when running on the repository default branch (usually main).
      # This avoids GitHub UI/branch restrictions and ensures alerts are created for the default branch.
      - name: Upload to code-scanning
        if: ${{ (github.event.inputs.branch == github.repository_default_branch) || (github.ref == format('refs/heads/{0}', github.repository_default_branch)) || (github.event.inputs.branch == 'main' && github.repository_default_branch == 'main') }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Print SARIF sample (debug)
        if: always()
        run: |
          echo "---- sample of normalized SARIF results (first 200 lines) ----"
          head -n 200 results.sarif || true
